// Rumman Shahzad and Shah Qureshi
// CS 385-01, Progress Report 1
// February 29, 2024

// 1-bit half-adder in gate-level modeling.
module half_adder(A,B,S,C);
    input A,B;
    output S,C;
    
    xor (S,A,B);
    and (C,A,B);
endmodule

// 1-bit full adder (with cascaded half-adders) in gate-level modeling.
module full_adder(A,B,Cin,S,Cout);
    input A,B,Cin;
    output S,Cout;
    wire s1,c1,c2;

    half_adder HA1(A,B,s1,c1),
               HA2(s1,Cin,S,c2);
    or G1(Cout,c1,c2);
endmodule

// 1-bit 2x1 multiplexer in gate-level modeling.
module two_mux(a,b,ctl,out);
    input a,b,ctl;
    output out;
    wire w1,w2,w3;

    not g1(w1,ctl);
    and g2(w2,a,w1),
	g3(w3,b,ctl);
    or g4(out,w2,w3);
endmodule

// 1-bit 4x1 multiplexer in gate-level modeling, implemented with cascaded 2x1 multiplexers.
module four_mux(a,b,c,d,ctl,out);
    input a,b,c,d;
    input [1:0] ctl;
    output out;
    wire w1,w2;

    two_mux mux1(a,b,ctl[0],w1),
	    mux2(c,d,ctl[0],w2),
            mux3(w1,w2,ctl[1],out);
endmodule

// 2-bit 2x1 multiplexer in gate-level modeling.
module twobit_two_mux(a,b,ctl,out);
    input ctl;
    input [1:0] a,b;
    output [1:0] out;
    wire wN,w0,w1,w2,w3;
    
    not n0(wN,ctl);
    and g0(a0,a[0],wN),
        g1(a1,a[1],wN);
    and g2(b0,b[0],ctl),
        g3(b1,b[1],ctl);
    
    or g4(out[0],a0,b0),
       g5(out[1],a1,b1);
endmodule

// 16-bit 2x1 multiplexer in gate-level modeling, implemented with cascaded 2-bit 2x1 multiplexers.
module sixteenbit_two_mux(a,b,ctl,out);
    input ctl;
    input [15:0] a,b;
    output [15:0] out;

    twobit_two_mux m0(a[1:0],b[1:0],ctl,out[1:0]),
		           m1(a[3:2],b[3:2],ctl,out[3:2]),
		           m2(a[5:4],b[5:4],ctl,out[5:4]),
                   m3(a[7:6],b[7:6],ctl,out[7:6]),
                   m4(a[9:8],b[9:8],ctl,out[9:8]),
                   m5(a[11:10],b[11:10],ctl,out[11:10]),
                   m6(a[13:12],b[13:12],ctl,out[13:12]),
                   m7(a[15:14],b[15:14],ctl,out[15:14]);    
endmodule

// 1-bit ALU in gate-level modeling, which will be cascaded 15 times.
module onebit_ALU(a,b,less,Ainvert,Bnegate,cin,op,result,cout);
    input a,b,less,Ainvert,Bnegate,cin;
    input [1:0] op;
    output result,cout;
    wire wNA,wNB,w0,w1,w2,w3,w4;

    not n0(wNA,a),
        n1(wNB,b);

    two_mux m0(a,wNA,Ainvert,w0),
            m1(b,wNB,Bnegate,w1);

    and g0(w2,w0,w1);
    or g1(w3,w0,w1);
    full_adder FA(w0,w1,cin,w4,cout);

    four_mux m2(w2,w3,w4,less,op,result);
endmodule

// The final 1-bit ALU in gate-level modeling, which will be used once at the end in the main ALU unit.
module onebit_ALU_final(a,b,less,Ainvert,Bnegate,cin,op,result,set);
    input a,b,less,Ainvert,Bnegate,cin;
    input [1:0] op;
    output result,set;
    wire wNA,wNB,w0,w1,w2,w3,cout;

    not n0(wNA,a),
   	n1(wNB,b);

    two_mux m0(a,wNA,Ainvert,w0),
	    m1(b,wNB,Bnegate,w1);

    and g0(w2,w0,w1);
    or g1(w3,w0,w1);
    full_adder FA(w0,w1,cin,set,cout);

    four_mux m2(w2,w3,set,less,op,result);
endmodule

// Complete 16-bit ALU in gate-level modeling.
module ALU(ALUctl,A,B,Result);
    input [3:0] ALUctl;
    input [15:0] A,B;
    output [15:0] Result;
    wire cout0,cout1,cout2,cout3,cout4,cout5,cout6,cout7,cout8,cout9,cout10,cout11,cout12,cout13,cout14,set;

    onebit_ALU alu0(A[0],B[0],set,ALUctl[3],ALUctl[2],ALUctl[2],ALUctl[1:0],Result[0],cout0),
	       alu1(A[1],B[1],1'b0,ALUctl[3],ALUctl[2],cout0,ALUctl[1:0],Result[1],cout1),
	       alu2(A[2],B[2],1'b0,ALUctl[3],ALUctl[2],cout1,ALUctl[1:0],Result[2],cout2),
	       alu3(A[3],B[3],1'b0,ALUctl[3],ALUctl[2],cout2,ALUctl[1:0],Result[3],cout3),
	       alu4(A[4],B[4],1'b0,ALUctl[3],ALUctl[2],cout3,ALUctl[1:0],Result[4],cout4),
	       alu5(A[5],B[5],1'b0,ALUctl[3],ALUctl[2],cout4,ALUctl[1:0],Result[5],cout5),
	       alu6(A[6],B[6],1'b0,ALUctl[3],ALUctl[2],cout5,ALUctl[1:0],Result[6],cout6),
	       alu7(A[7],B[7],1'b0,ALUctl[3],ALUctl[2],cout6,ALUctl[1:0],Result[7],cout7),
	       alu8(A[8],B[8],1'b0,ALUctl[3],ALUctl[2],cout7,ALUctl[1:0],Result[8],cout8),
	       alu9(A[9],B[9],1'b0,ALUctl[3],ALUctl[2],cout8,ALUctl[1:0],Result[9],cout9),
	       alu10(A[10],B[10],1'b0,ALUctl[3],ALUctl[2],cout9,ALUctl[1:0],Result[10],cout10),
	       alu11(A[11],B[11],1'b0,ALUctl[3],ALUctl[2],cout10,ALUctl[1:0],Result[11],cout11),
	       alu12(A[12],B[12],1'b0,ALUctl[3],ALUctl[2],cout11,ALUctl[1:0],Result[12],cout12),
	       alu13(A[13],B[13],1'b0,ALUctl[3],ALUctl[2],cout12,ALUctl[1:0],Result[13],cout13),
	       alu14(A[14],B[14],1'b0,ALUctl[3],ALUctl[2],cout13,ALUctl[1:0],Result[14],cout14);
    onebit_ALU_final alu15(A[15],B[15],1'b0,ALUctl[3],ALUctl[2],cout14,ALUctl[1:0],Result[15],set);
endmodule

// Main control unit, implemented in behavioral modeling.
module MainControl (Op,Control); 
    input [3:0] Op;
    output reg [6:0] Control;

    // Control bits: RegDst, ALUSrc, RegWrite, ALUctl
    always @(Op) case (Op)
        4'b0000: Control <= 7'b101_0010; // add
        4'b0001: Control <= 7'b101_0110; // sub
        4'b0010: Control <= 7'b101_0000; // and
        4'b0011: Control <= 7'b101_0001; // or
        4'b0100: Control <= 7'b101_1100; // nor
        4'b0101: Control <= 7'b101_1101; // nand
        4'b0110: Control <= 7'b101_0111; // slt
        4'b0111: Control <= 7'b011_0010; // addi
    endcase
endmodule

// Register file in behavioral modeling.
module reg_file(RR1,RR2,WR,WD,RegWrite,RD1,RD2,clock);
    input [1:0] RR1,RR2,WR;
    input [15:0] WD;
    input RegWrite,clock;
    output [15:0] RD1,RD2;
    reg [15:0] Regs[0:3];
    assign RD1 = Regs[RR1];
    assign RD2 = Regs[RR2];
    initial Regs[0] = 0;
    always @(negedge clock)
        if (RegWrite==1 & WR!=0) 
            Regs[WR] <= WD;
endmodule

// Main CPU module, implemented with other modules and behavioral modeling.
module CPU (clock,PC,ALUOut,IR);
    input clock;
    output [15:0] ALUOut,IR,PC;
    reg[15:0] PC;
    reg[15:0] IMemory[0:1023];
    wire [15:0] IR,NextPC,A,B,ALUOut,RD2,SignExtend;
    wire [3:0] ALUctl;
    wire [1:0] WR;

    // Test Program
    initial begin
        IMemory[0] = 16'b0111_00_01_00001111;  // addi $t1,$0,15   ($t1=15)
        IMemory[1] = 16'b0111_00_10_00000111;  // addi $t2,$0,7    ($t2=7)
        IMemory[2] = 16'b0010_01_10_11_000000; // and $t3,$t1,$t2  ($t3=7)
        IMemory[3] = 16'b0001_01_11_10_000000; // sub $t2,$t1,$t3  ($t2=8)
        IMemory[4] = 16'b0011_10_11_10_000000; // or $t2,$t2,$t3   ($t2=15)
        IMemory[5] = 16'b0000_10_11_11_000000; // add $t3,$t2,$t3  ($t3=22)
        IMemory[6] = 16'b0100_10_11_01_000000; // nor $t1,$t2,$t3  ($t1=-32)
        IMemory[7] = 16'b0110_11_10_01_000000; // slt $t1,$t3,$t2  ($t1=0)
        IMemory[8] = 16'b0110_10_11_01_000000; // slt $t1,$t2,$t3  ($t1=1)
    end

    initial PC = 0;
    assign IR = IMemory[PC>>1];
    twobit_two_mux mux0 (IR[9:8],IR[7:6],RegDst,WR); // RegDst MUX
    sixteenbit_two_mux mux1(RD2,SignExtend,ALUSrc,B); // ALUSrc MUX    

    assign SignExtend = {{8{IR[7]}},IR[7:0]}; // sign extension unit
    reg_file rf (IR[11:10],IR[9:8],WR,ALUOut,RegWrite,A,RD2,clock);
    ALU fetch (4'b0010,PC,16'd2,NextPC);
    ALU ex (ALUctl,A,B,ALUOut);
    MainControl MainCtr (IR[15:12],{RegDst,ALUSrc,RegWrite,ALUctl});
    
    always @(negedge clock) begin 
        PC <= NextPC;
    end
endmodule

// Test module
module test ();
    reg clock;
    wire signed [15:0] WD,IR,PC;
    CPU test_cpu(clock,PC,WD,IR);
    always #1 clock = ~clock;
    initial begin
        $display ("Clock PC   IR                 WD");
        $monitor ("%b     %2d   %b  %3d (%b)",clock,PC,IR,WD,WD);
        clock = 1;
        #16 $finish;
    end
endmodule

/* Output
Clock PC   IR                 WD
1      0   0111000100001111   15 (0000000000001111)
0      2   0111001000000111    7 (0000000000000111)
1      2   0111001000000111    7 (0000000000000111)
0      4   0010011011000000    7 (0000000000000111)
1      4   0010011011000000    7 (0000000000000111)
0      6   0001011110000000    8 (0000000000001000)
1      6   0001011110000000    8 (0000000000001000)
0      8   0011101110000000   15 (0000000000001111)
1      8   0011101110000000   15 (0000000000001111)
0     10   0000101111000000   22 (0000000000010110)
1     10   0000101111000000   22 (0000000000010110)
0     12   0100101101000000  -32 (1111111111100000)
1     12   0100101101000000  -32 (1111111111100000)
0     14   0110111001000000    0 (0000000000000000)
1     14   0110111001000000    0 (0000000000000000)
0     16   0110101101000000    1 (0000000000000001)
1     16   0110101101000000    1 (0000000000000001)
*/