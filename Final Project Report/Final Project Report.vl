// Rumman Shahzad and Shah Qureshi
// CS 385-01, Final Project Report
// April 30th, 2024

// MIPS - pipelined implementation

module reg_file (RR1,RR2,WR,WD,RegWrite,RD1,RD2,clock);
  input [1:0] RR1,RR2,WR;
  input [15:0] WD;
  input RegWrite,clock;
  output [15:0] RD1,RD2;
  reg [15:0] Regs[0:15];
  assign RD1 = Regs[RR1];
  assign RD2 = Regs[RR2];
  initial Regs[0] = 0;
  always @(negedge clock)
    if (RegWrite==1 & WR!=0)
  Regs[WR] <= WD;
endmodule

// 1-bit half-adder in gate-level modeling.
module half_adder(A,B,S,C);
    input A,B;
    output S,C;
   
    xor (S,A,B);
    and (C,A,B);
endmodule

// 1-bit full adder (with cascaded half-adders) in gate-level modeling.
module full_adder(A,B,Cin,S,Cout);
    input A,B,Cin;
    output S,Cout;
    wire s1,c1,c2;


    half_adder HA1(A,B,s1,c1),
               HA2(s1,Cin,S,c2);
    or G1(Cout,c1,c2);
endmodule

// 1-bit 2x1 multiplexer in gate-level modeling.
module two_mux(a,b,ctl,out);
    input a,b,ctl;
    output out;
    wire w1,w2,w3;

    not g1(w1,ctl);
    and g2(w2,a,w1),
  g3(w3,b,ctl);
    or g4(out,w2,w3);
endmodule


// 1-bit 4x1 multiplexer in gate-level modeling, implemented with cascaded 2x1 multiplexers.
module four_mux(a,b,c,d,ctl,out);
    input a,b,c,d;
    input [1:0] ctl;
    output out;
    wire w1,w2;

    two_mux mux1(a,b,ctl[0],w1),
      mux2(c,d,ctl[0],w2),
            mux3(w1,w2,ctl[1],out);
endmodule


module twobit_two_mux(a, b, ctl, out);
    input ctl;
    input [1:0] a, b;
    output [1:0] out;
    wire wN, a0, a1, b0, b1;
   
    not n0(wN, ctl);
    and g0(a0, a[0], wN),
        g1(a1, a[1], wN);
    and g2(b0, b[0], ctl),
        g3(b1, b[1], ctl);
   
    or g4(out[0], a0, b0),
       g5(out[1], a1, b1);
endmodule




// 16-bit 2x1 multiplexer in gate-level modeling, implemented with cascaded 2-bit 2x1 multiplexers.
module sixteenbit_two_mux(a,b,ctl,out);
    input ctl;
    input [15:0] a,b;
    output [15:0] out;

    twobit_two_mux m0(a[1:0],b[1:0],ctl,out[1:0]),
               m1(a[3:2],b[3:2],ctl,out[3:2]),
               m2(a[5:4],b[5:4],ctl,out[5:4]),
               m3(a[7:6],b[7:6],ctl,out[7:6]),
               m4(a[9:8],b[9:8],ctl,out[9:8]),
               m5(a[11:10],b[11:10],ctl,out[11:10]),
               m6(a[13:12],b[13:12],ctl,out[13:12]),
               m7(a[15:14],b[15:14],ctl,out[15:14]);    
endmodule


// 1-bit ALU in gate-level modeling, which will be cascaded 15 times.
module onebit_ALU(a,b,less,Ainvert,Bnegate,cin,op,result,cout);
    input a,b,less,Ainvert,Bnegate,cin;
    input [1:0] op;
    output result,cout;
    wire wNA,wNB,w0,w1,w2,w3,w4;

    not n0(wNA,a),
        n1(wNB,b);

    two_mux m0(a,wNA,Ainvert,w0),
            m1(b,wNB,Bnegate,w1);

    and g0(w2,w0,w1);
    or g1(w3,w0,w1);
    full_adder FA(w0,w1,cin,w4,cout);

    four_mux m2(w2,w3,w4,less,op,result);
endmodule


// The final 1-bit ALU in gate-level modeling, which will be used once at the end in the main ALU unit.
module onebit_ALU_final(a,b,less,Ainvert,Bnegate,cin,op,result,set);
    input a,b,less,Ainvert,Bnegate,cin;
    input [1:0] op;
    output result,set;
    wire wNA,wNB,w0,w1,w2,w3,cout;

    not n0(wNA,a),
        n1(wNB,b);

    two_mux m0(a,wNA,Ainvert,w0),
            m1(b,wNB,Bnegate,w1);

    and g0(w2,w0,w1);
    or g1(w3,w0,w1);
    full_adder FA(w0,w1,cin,set,cout);

    four_mux m2(w2,w3,set,less,op,result);
endmodule


// Complete 16-bit ALU in gate-level modeling.
module alu(op,A,B,Result,Zero);
    input [3:0] op;
    input [15:0] A,B;
    output [15:0] Result;
    output Zero;
    wire cout0,cout1,cout2,cout3,cout4,cout5,cout6,cout7,cout8,cout9,cout10,cout11,cout12,cout13,cout14,set;


    onebit_ALU alu0(A[0],B[0],set,op[3],op[2],op[2],op[1:0],Result[0],cout0),
         alu1(A[1],B[1],1'b0,op[3],op[2],cout0,op[1:0],Result[1],cout1),
         alu2(A[2],B[2],1'b0,op[3],op[2],cout1,op[1:0],Result[2],cout2),
         alu3(A[3],B[3],1'b0,op[3],op[2],cout2,op[1:0],Result[3],cout3),
         alu4(A[4],B[4],1'b0,op[3],op[2],cout3,op[1:0],Result[4],cout4),
         alu5(A[5],B[5],1'b0,op[3],op[2],cout4,op[1:0],Result[5],cout5),
         alu6(A[6],B[6],1'b0,op[3],op[2],cout5,op[1:0],Result[6],cout6),
         alu7(A[7],B[7],1'b0,op[3],op[2],cout6,op[1:0],Result[7],cout7),
         alu8(A[8],B[8],1'b0,op[3],op[2],cout7,op[1:0],Result[8],cout8),
         alu9(A[9],B[9],1'b0,op[3],op[2],cout8,op[1:0],Result[9],cout9),
         alu10(A[10],B[10],1'b0,op[3],op[2],cout9,op[1:0],Result[10],cout10),
         alu11(A[11],B[11],1'b0,op[3],op[2],cout10,op[1:0],Result[11],cout11),
         alu12(A[12],B[12],1'b0,op[3],op[2],cout11,op[1:0],Result[12],cout12),
         alu13(A[13],B[13],1'b0,op[3],op[2],cout12,op[1:0],Result[13],cout13),
         alu14(A[14],B[14],1'b0,op[3],op[2],cout13,op[1:0],Result[14],cout14);
    onebit_ALU_final alu15(A[15],B[15],1'b0,op[3],op[2],cout14,op[1:0],Result[15],set);


    nor gZero(Zero,Result[0],Result[1],Result[2],Result[3],Result[4],Result[5],Result[6],Result[7],Result[8],Result[9],Result[10],Result[11],Result[12],Result[13],Result[14],Result[15]);
endmodule


module MainControl (Op,Control);
  input [3:0] Op;
  output reg [10:0] Control;
// IDEX_RegDst,IDEX_ALUSrc,IDEX_MemtoReg,IDEX_RegWrite,IDEX_MemWrite,IDEX_Branch,IDEX_ALUCtl
  always @(Op) case (Op)
    4'b0000: Control <= 11'b10010_00_0010; // add
    4'b0001: Control <= 11'b10010_00_0110; // sub
    4'b0010: Control <= 11'b10010_00_0000; // and
    4'b0011: Control <= 11'b10010_00_0001; // or
    4'b0100: Control <= 11'b10010_00_1100; // nor
    4'b0101: Control <= 11'b10010_00_1101; // nand
    4'b0110: Control <= 11'b10010_00_0111; // slt
    4'b0111: Control <= 11'b01010_00_0010; // addi
    4'b1000: Control <= 11'b01110_00_0010; // lw
    4'b1001: Control <= 11'b01001_00_0010; // sw
    4'b1010: Control <= 11'b00000_10_0110; // beq
    4'b1011: Control <= 11'b00000_01_0110; // bne
  endcase
endmodule


// Branch Control Module in gate-level modeling
module BranchControl (beq,bne,zero,branch);
  input beq, bne, zero;
  output branch;
  wire w1, w2, w3;

  and g2(w2, beq, zero);
  not g1(w1, zero);
  and g3(w3, bne, w1);
  or g4(branch, w2, w3);
endmodule

// CPU module
module CPU (clock,PC,IFID_IR,IDEX_IR,EXMEM_IR,MEMWB_IR,WD);
  input clock;
  output [15:0] PC,IFID_IR,IDEX_IR,EXMEM_IR,MEMWB_IR,WD;

  initial begin
// Program: swap memory cells (if needed) and compute absolute value |5-7|=2
   IMemory[0]=16'b1000_00_01_00000000;   // lw $1, 0($0)
   IMemory[1]=16'b1000_00_10_00000010;   // lw $2, 2($0)
   IMemory[2]=16'b0000000000000000;      // nop
   IMemory[3]=16'b0000000000000000;      // nop
   IMemory[4]=16'b0000000000000000;      // nop
   IMemory[5]=16'b0110_01_10_11_000000;  // slt $3, $1, $2
   IMemory[6]=16'b0000000000000000;      // nop
   IMemory[7]=16'b0000000000000000;      // nop
   IMemory[8]=16'b0000000000000000;      // nop
   IMemory[9]=16'b1010_11_00_00000101;   // beq $3, $0, IMemory[15]
   IMemory[10]=16'b0000000000000000;     // nop
   IMemory[11]=16'b0000000000000000;     // nop
   IMemory[12]=16'b0000000000000000;     // nop
   IMemory[13]=16'b1001_00_01_00000010;  // sw $1, 2($0)
   IMemory[14]=16'b1001_00_10_00000000;  // sw $2, 0($0)
   IMemory[15]=16'b0000000000000000;     // nop
   IMemory[16]=16'b0000000000000000;     // nop
   IMemory[17]=16'b0000000000000000;     // nop
   IMemory[18]=16'b1000_00_01_00000000;  // lw $1, 0($0)
   IMemory[19]=16'b1000_00_10_00000010;  // lw $2, 2($0)
   IMemory[20]=16'b0000000000000000;     // nop
   IMemory[21]=16'b0000000000000000;     // nop
   IMemory[22]=16'b0000000000000000;     // nop
   IMemory[23]=16'b0100_10_10_10_000000; // nor $2, $2, $2
   IMemory[24]=16'b0000000000000000;     // nop
   IMemory[25]=16'b0000000000000000;     // nop
   IMemory[26]=16'b0000000000000000;     // nop
   IMemory[27]=16'b0111_10_10_00000001;  // addi $2, $2, 1
   IMemory[28]=16'b0000000000000000;     // nop
   IMemory[29]=16'b0000000000000000;     // nop
   IMemory[30]=16'b0000000000000000;     // nop
   IMemory[31]=16'b0000_01_10_11_000000; // add $3, $1, $2
 
// Data
   DMemory[0]=16'd5; // switch the cells and see how the simulation output changes
   DMemory[1]=16'd7; // (beq is taken if DMemory[0]=7; DMemory[1]=5, not taken otherwise)
  end

// Pipeline
// IF
   wire [15:0] PCplus2, NextPC;
   reg[15:0] PC, IMemory[0:1023], IFID_IR, IFID_PCplus2;
   alu fetch (4'b0010,PC,16'd2,PCplus2,Unused1);
   BranchControl b1(EXMEM_Beq,EXMEM_Bne,EXMEM_Zero,BranchOut);
   sixteenbit_two_mux mux7(PCplus2,EXMEM_Target,BranchOut,NextPC);
   //assign NextPC = (EXMEM_Branch && EXMEM_Zero) ? EXMEM_Target: PCplus2;
// ID
   wire [10:0] Control;
   reg IDEX_RegWrite, IDEX_MemtoReg, IDEX_MemWrite, IDEX_ALUSrc, IDEX_RegDst, IDEX_Beq, IDEX_Bne, IDEX_Zero;

   reg [3:0]  IDEX_ALUCtl;
   wire [15:0] RD1,RD2,SignExtend, WD;
   reg [15:0] IDEX_PCplus2,IDEX_RD1,IDEX_RD2,IDEX_SignExt,IDEXE_IR;
   reg [15:0] IDEX_IR; // For monitoring the pipeline
   reg [1:0]  IDEX_rt,IDEX_rd;
   reg MEMWB_RegWrite; // part of MEM stage, but declared here before use (to avoid error)
   reg [1:0] MEMWB_rd; // part of MEM stage, but declared here before use (to avoid error)
   reg_file rf (IFID_IR[11:10],IFID_IR[9:8],MEMWB_rd,WD,MEMWB_RegWrite,RD1,RD2,clock);
   MainControl MainCtr (IFID_IR[15:12],Control);
   assign SignExtend = {{8{IFID_IR[7]}},IFID_IR[7:0]};
// EXE
   reg EXMEM_RegWrite, EXMEM_MemtoReg, EXMEM_Beq, EXMEM_Bne, EXMEM_MemWrite;
   
   wire [15:0] Target;
   reg EXMEM_Zero;
   reg [15:0] EXMEM_Target,EXMEM_ALUOut,EXMEM_RD2;
   reg [15:0] EXMEM_IR; // For monitoring the pipeline
   reg [1:0] EXMEM_rd;
   wire [15:0] B,ALUOut;
   wire [3:0] ALUCtl;
   wire [1:0] WR;
   alu branch (4'b0010,IDEX_SignExt<<1,IDEX_PCplus2,Target,Unused2);
   alu ex (IDEX_ALUCtl, IDEX_RD1, B, ALUOut, Zero);

   sixteenbit_two_mux mux4(IDEX_RD2,IDEX_SignExt,IDEX_ALUSrc,B);// ALUSrc Mux
   twobit_two_mux mux5(IDEX_rt,IDEX_rd,IDEX_RegDst,WR);         // RegDst Mux

// MEM
   reg MEMWB_MemtoReg;
   reg [15:0] DMemory[0:1023],MEMWB_MemOut,MEMWB_ALUOut;
   reg [15:0] MEMWB_IR; // For monitoring the pipeline
   wire [15:0] MemOut;
   assign MemOut = DMemory[EXMEM_ALUOut>>1];
   always @(negedge clock) if (EXMEM_MemWrite) DMemory[EXMEM_ALUOut>>1] <= EXMEM_RD2;
// WB
   sixteenbit_two_mux mux6(MEMWB_ALUOut,MEMWB_MemOut,MEMWB_MemtoReg,WD); // MemtoReg Mux

   initial begin
    PC = 0;
// Initialize pipeline registers

    IDEX_RegWrite=0;IDEX_MemtoReg=0;IDEX_Beq=0;IDEX_Bne=0;IDEX_Zero=0;IDEX_MemWrite=0;IDEX_ALUSrc=0;IDEX_RegDst=0;IDEX_ALUCtl=0;
    IFID_IR=0;
    EXMEM_RegWrite=0;EXMEM_MemtoReg=0;EXMEM_Beq=0;EXMEM_Bne=0;EXMEM_MemWrite=0;
    EXMEM_Target=0;
    MEMWB_RegWrite=0;MEMWB_MemtoReg=0;
   end


// Running the pipeline
   always @(negedge clock) begin
// IF
    PC <= NextPC;
    IFID_PCplus2 <= PCplus2;
    IFID_IR <= IMemory[PC>>1];
// ID
    IDEX_IR <= IFID_IR; // For monitoring the pipeline
    
    {IDEX_RegDst,IDEX_ALUSrc,IDEX_MemtoReg,IDEX_RegWrite,IDEX_MemWrite,IDEX_Beq,IDEX_Bne,IDEX_ALUCtl} <= Control;
    
    IDEX_PCplus2 <= IFID_PCplus2;
    IDEX_RD1 <= RD1;
    IDEX_RD2 <= RD2;
    IDEX_SignExt <= SignExtend;
    IDEX_rt <= IFID_IR[9:8];
    IDEX_rd <= IFID_IR[7:6];
// EXE
    EXMEM_IR <= IDEX_IR; // For monitoring the pipeline
    EXMEM_RegWrite <= IDEX_RegWrite;
    EXMEM_MemtoReg <= IDEX_MemtoReg;
    EXMEM_Beq      <= IDEX_Beq;
    EXMEM_Bne      <= IDEX_Bne;
    
    EXMEM_MemWrite <= IDEX_MemWrite;
    EXMEM_Target <= Target;
    EXMEM_Zero <= Zero;
    EXMEM_ALUOut <= ALUOut;
    EXMEM_RD2 <= IDEX_RD2;
    EXMEM_rd <= WR;
// MEM
    MEMWB_IR <= EXMEM_IR; // For monitoring the pipeline
    MEMWB_RegWrite <= EXMEM_RegWrite;
    MEMWB_MemtoReg <= EXMEM_MemtoReg;
    MEMWB_MemOut <= MemOut;
    MEMWB_ALUOut <= EXMEM_ALUOut;
    MEMWB_rd <= EXMEM_rd;
// WB
// Register write happens on neg edge of the clock (if MEMWB_RegWrite is asserted)
  end
endmodule

// Test module
module test ();
  reg clock;
  wire signed [15:0] PC,IFID_IR,IDEX_IR,EXMEM_IR,MEMWB_IR,WD;
  CPU test_cpu(clock,PC,IFID_IR,IDEX_IR,EXMEM_IR,MEMWB_IR,WD);
  always #1 clock = ~clock;
  initial begin
    $display ("PC   IFID_IR  IDEX_IR  EXMEM_IR MEMWB_IR  WD");
    $monitor ("%3d  %h     %h     %h     %h     %2d",PC,IFID_IR,IDEX_IR,EXMEM_IR,MEMWB_IR,WD);
    clock = 1;
    #69 $finish;
  end
endmodule


/* Output:
PC   IFID_IR  IDEX_IR  EXMEM_IR MEMWB_IR  WD
  0  00000000 xxxxxxxx xxxxxxxx xxxxxxxx  x
  4  8c090000 00000000 xxxxxxxx xxxxxxxx  x
  8  8c0a0004 8c090000 00000000 xxxxxxxx  x
 12  00000000 8c0a0004 8c090000 00000000  0
 16  00000000 00000000 8c0a0004 8c090000  5
 20  00000000 00000000 00000000 8c0a0004  7
 24  012a582a 00000000 00000000 00000000  0
 28  00000000 012a582a 00000000 00000000  0
 32  00000000 00000000 012a582a 00000000  0
 36  00000000 00000000 00000000 012a582a  1
 40  11600005 00000000 00000000 00000000  0
 44  00000000 11600005 00000000 00000000  0
 48  00000000 00000000 11600005 00000000  0
 52  00000000 00000000 00000000 11600005  1
 56  ac090004 00000000 00000000 00000000  0
 60  ac0a0000 ac090004 00000000 00000000  0
 64  00000000 ac0a0000 ac090004 00000000  0
 68  00000000 00000000 ac0a0000 ac090004  4
 72  00000000 00000000 00000000 ac0a0000  0
 76  8c090000 00000000 00000000 00000000  0
 80  8c0a0004 8c090000 00000000 00000000  0
 84  00000000 8c0a0004 8c090000 00000000  0
 88  00000000 00000000 8c0a0004 8c090000  7
 92  00000000 00000000 00000000 8c0a0004  5
 96  014a5027 00000000 00000000 00000000  0
100  00000000 014a5027 00000000 00000000  0
104  00000000 00000000 014a5027 00000000  0
108  00000000 00000000 00000000 014a5027 -6
112  214a0001 00000000 00000000 00000000 -1
116  00000000 214a0001 00000000 00000000 -1
120  00000000 00000000 214a0001 00000000 -1
124  00000000 00000000 00000000 214a0001 -5
128  012a5820 00000000 00000000 00000000  0
132  xxxxxxxx 012a5820 00000000 00000000  0
136  xxxxxxxx xxxxxxxx 012a5820 00000000  0
140  xxxxxxxx xxxxxxxx xxxxxxxx 012a5820  2
*/
