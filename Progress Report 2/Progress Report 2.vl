// Rumman Shahzad and Shah Qureshi
// CS 385-01, Progress Report 2
// March 28th, 2024

// Register file in behavioral modeling.
module reg_file (RR1,RR2,WR,WD,RegWrite,RD1,RD2,clock);
  input [1:0] RR1,RR2,WR;
  input [15:0] WD;
  input RegWrite,clock;
  output [15:0] RD1,RD2;
  reg [15:0] Regs[0:3];
  assign RD1 = Regs[RR1];
  assign RD2 = Regs[RR2];
  initial Regs[0] = 0;
  always @(negedge clock)
    if (RegWrite==1 & WR!=0) 
  Regs[WR] <= WD;
endmodule

// 1-bit half-adder in gate-level modeling.
module half_adder(A,B,S,C);
    input A,B;
    output S,C;
    
    xor (S,A,B);
    and (C,A,B);
endmodule

// 1-bit full adder (with cascaded half-adders) in gate-level modeling.
module full_adder(A,B,Cin,S,Cout);
    input A,B,Cin;
    output S,Cout;
    wire s1,c1,c2;

    half_adder HA1(A,B,s1,c1),
               HA2(s1,Cin,S,c2);
    or G1(Cout,c1,c2);
endmodule

// 1-bit 2x1 multiplexer in gate-level modeling.
module two_mux(a,b,ctl,out);
    input a,b,ctl;
    output out;
    wire w1,w2,w3;

    not g1(w1,ctl);
    and g2(w2,a,w1),
  g3(w3,b,ctl);
    or g4(out,w2,w3);
endmodule

// 1-bit 4x1 multiplexer in gate-level modeling, implemented with cascaded 2x1 multiplexers.
module four_mux(a,b,c,d,ctl,out);
    input a,b,c,d;
    input [1:0] ctl;
    output out;
    wire w1,w2;

    two_mux mux1(a,b,ctl[0],w1),
      mux2(c,d,ctl[0],w2),
            mux3(w1,w2,ctl[1],out);
endmodule

module twobit_two_mux(a, b, ctl, out);
    input ctl;
    input [1:0] a, b;
    output [1:0] out;
    wire wN, a0, a1, b0, b1;
    
    not n0(wN, ctl);
    and g0(a0, a[0], wN),
        g1(a1, a[1], wN);
    and g2(b0, b[0], ctl),
        g3(b1, b[1], ctl);
    
    or g4(out[0], a0, b0),
       g5(out[1], a1, b1);
endmodule


// 16-bit 2x1 multiplexer in gate-level modeling, implemented with cascaded 2-bit 2x1 multiplexers.
module sixteenbit_two_mux(a,b,ctl,out);
    input ctl;
    input [15:0] a,b;
    output [15:0] out;

    twobit_two_mux m0(a[1:0],b[1:0],ctl,out[1:0]),
               m1(a[3:2],b[3:2],ctl,out[3:2]),
               m2(a[5:4],b[5:4],ctl,out[5:4]),
                   m3(a[7:6],b[7:6],ctl,out[7:6]),
                   m4(a[9:8],b[9:8],ctl,out[9:8]),
                   m5(a[11:10],b[11:10],ctl,out[11:10]),
                   m6(a[13:12],b[13:12],ctl,out[13:12]),
                   m7(a[15:14],b[15:14],ctl,out[15:14]);    
endmodule

// 1-bit ALU in gate-level modeling, which will be cascaded 15 times.
module onebit_ALU(a,b,less,Ainvert,Bnegate,cin,op,result,cout);
    input a,b,less,Ainvert,Bnegate,cin;
    input [1:0] op;
    output result,cout;
    wire wNA,wNB,w0,w1,w2,w3,w4;

    not n0(wNA,a),
        n1(wNB,b);

    two_mux m0(a,wNA,Ainvert,w0),
            m1(b,wNB,Bnegate,w1);

    and g0(w2,w0,w1);
    or g1(w3,w0,w1);
    full_adder FA(w0,w1,cin,w4,cout);

    four_mux m2(w2,w3,w4,less,op,result);
endmodule

// The final 1-bit ALU in gate-level modeling, which will be used once at the end in the main ALU unit.
module onebit_ALU_final(a,b,less,Ainvert,Bnegate,cin,op,result,set);
    input a,b,less,Ainvert,Bnegate,cin;
    input [1:0] op;
    output result,set;
    wire wNA,wNB,w0,w1,w2,w3,cout;

    not n0(wNA,a),
     n1(wNB,b);

    two_mux m0(a,wNA,Ainvert,w0),
      m1(b,wNB,Bnegate,w1);

    and g0(w2,w0,w1);
    or g1(w3,w0,w1);
    full_adder FA(w0,w1,cin,set,cout);

    four_mux m2(w2,w3,set,less,op,result);
endmodule

// Complete 16-bit ALU in gate-level modeling.
module ALU(ALUctl,A,B,Result,Zero);
    input [3:0] ALUctl;
    input [15:0] A,B;
    output [15:0] Result;
    output Zero;
    wire cout0,cout1,cout2,cout3,cout4,cout5,cout6,cout7,cout8,cout9,cout10,cout11,cout12,cout13,cout14,set;

    onebit_ALU alu0(A[0],B[0],set,ALUctl[3],ALUctl[2],ALUctl[2],ALUctl[1:0],Result[0],cout0),
         alu1(A[1],B[1],1'b0,ALUctl[3],ALUctl[2],cout0,ALUctl[1:0],Result[1],cout1),
         alu2(A[2],B[2],1'b0,ALUctl[3],ALUctl[2],cout1,ALUctl[1:0],Result[2],cout2),
         alu3(A[3],B[3],1'b0,ALUctl[3],ALUctl[2],cout2,ALUctl[1:0],Result[3],cout3),
         alu4(A[4],B[4],1'b0,ALUctl[3],ALUctl[2],cout3,ALUctl[1:0],Result[4],cout4),
         alu5(A[5],B[5],1'b0,ALUctl[3],ALUctl[2],cout4,ALUctl[1:0],Result[5],cout5),
         alu6(A[6],B[6],1'b0,ALUctl[3],ALUctl[2],cout5,ALUctl[1:0],Result[6],cout6),
         alu7(A[7],B[7],1'b0,ALUctl[3],ALUctl[2],cout6,ALUctl[1:0],Result[7],cout7),
         alu8(A[8],B[8],1'b0,ALUctl[3],ALUctl[2],cout7,ALUctl[1:0],Result[8],cout8),
         alu9(A[9],B[9],1'b0,ALUctl[3],ALUctl[2],cout8,ALUctl[1:0],Result[9],cout9),
         alu10(A[10],B[10],1'b0,ALUctl[3],ALUctl[2],cout9,ALUctl[1:0],Result[10],cout10),
         alu11(A[11],B[11],1'b0,ALUctl[3],ALUctl[2],cout10,ALUctl[1:0],Result[11],cout11),
         alu12(A[12],B[12],1'b0,ALUctl[3],ALUctl[2],cout11,ALUctl[1:0],Result[12],cout12),
         alu13(A[13],B[13],1'b0,ALUctl[3],ALUctl[2],cout12,ALUctl[1:0],Result[13],cout13),
         alu14(A[14],B[14],1'b0,ALUctl[3],ALUctl[2],cout13,ALUctl[1:0],Result[14],cout14);
    onebit_ALU_final alu15(A[15],B[15],1'b0,ALUctl[3],ALUctl[2],cout14,ALUctl[1:0],Result[15],set);

    nor gZero(Zero,Result[0],Result[1],Result[2],Result[3],Result[4],Result[5],Result[6],Result[7],Result[8],Result[9],Result[10],Result[11],Result[12],Result[13],Result[14],Result[15]);
endmodule

module MainControl (Op, Control); 
  input [3:0] Op;
  output reg [10:0] Control;

  always @(Op) case (Op)
    4'b0000: Control <= 11'b10010_0_0_0010; // add
    4'b0001: Control <= 11'b10010_0_0_0110; // sub
    4'b0010: Control <= 11'b10010_0_0_0000; // and
    4'b0011: Control <= 11'b10010_0_0_0001; // or
    4'b0100: Control <= 11'b10010_0_0_1100; // nor
    4'b0101: Control <= 11'b10010_0_0_1101; // nand
    4'b0110: Control <= 11'b10010_0_0_0111; // slt
    4'b0111: Control <= 11'b01010_0_0_0010; // addi
    4'b1000: Control <= 11'b01110_0_0_0010; // lw
    4'b1001: Control <= 11'b01001_0_0_0010; // sw
    4'b1010: Control <= 11'b00000_1_0_0110; // beq
    4'b1011: Control <= 11'b00000_0_1_0110; // bne
    4'b1100: Control <= 11'b00000_1_0_0110; // j
  endcase
endmodule

// Branch Control Module in gate-level modeling
module BranchControl (beq,bne,zero,branch);
  input beq, bne, zero;
  output branch;
  wire w1, w2, w3;

  and g2(w2, beq, zero);
  not g1(w1, zero);
  and g3(w3, bne, w1);
  or g4(branch, w2, w3);
endmodule

module CPU (clock,WD,IR,PC);

  input clock;
  output [15:0] WD,IR,PC;
  reg[15:0] PC, IMemory[0:1023], DMemory[0:1023];
  wire [15:0] IR,SignExtend,NextPC,RD2,A,B,ALUOut,PCplus2,Target;
  wire [1:0] WR;
  wire [3:0] ALUctl;
  initial begin 
  // Program: corrected to match the expected output
  IMemory[0] = 16'b1000000100000000;  // lw $1, 0($0)
  IMemory[1] = 16'b1000001000000010;  // lw $2, 2($0)
  IMemory[2] = 16'b0110011011000000;  // slt $3, $1, $2
  IMemory[3] = 16'b1010110000000010;  // beq $3, $0, IMemory[6]
  IMemory[4] = 16'b1001000100000010;  // sw $1, 2($0)
  IMemory[5] = 16'b1001001000000000;  // sw $2, 0($0)
  IMemory[6] = 16'b1000000100000000;  // lw $1, 0($0)
  IMemory[7] = 16'b1000001000000010;  // lw $2, 2($0)
  IMemory[8] = 16'b0100101010000000;  // nor $2, $2, $2
  IMemory[9] = 16'b0111101000000001;  // addi $2, $2, 1
  IMemory[10] = 16'b0000011011000000; // add $3, $1, $2
    // Data
    DMemory [0] = 16'd7; // swap the cells and see how the simulation output changes
    DMemory [1] = 16'd5;
  end
  initial PC = 0;
  assign IR = IMemory[PC>>1];
  assign SignExtend = {{8{IR[7]}},IR[7:0]}; // sign extension
  reg_file rf (IR[11:10],IR[9:8],WR,WD,RegWrite,A,RD2,clock);
  ALU fetch (4'b0010,PC,16'd2,PCplus2,Unused1);
  ALU ex (ALUctl, A, B, ALUOut, Zero);
  ALU branch (4'b0010,SignExtend<<1,PCplus2,Target,Unused2);
  MainControl MainCtr (IR[15:12],{RegDst,ALUSrc,MemtoReg,RegWrite,MemWrite,Beq,Bne,ALUctl}); 

  twobit_two_mux mux0 (IR[9:8],IR[7:6],RegDst,WR); // RegDst Mux
  sixteenbit_two_mux mux1 (ALUOut,DMemory[ALUOut>>1],MemtoReg,WD); // MemtoReg Mux
  sixteenbit_two_mux mux2 (RD2,SignExtend,ALUSrc,B); // AlUSrc Mux

  // Branch control and multiplexer
  BranchControl bctl (Beq,Bne,Zero,Branch);
  sixteenbit_two_mux mux3(PCplus2,Target,Branch,NextPC);

  always @(negedge clock) begin 
    PC <= NextPC;
    if (MemWrite) DMemory[ALUOut>>1] <= RD2;
  end
endmodule

// Test module
module test ();
  reg clock;
  wire signed [15:0] WD,IR,PC;
  CPU test_cpu(clock,WD,IR,PC);
  always #1 clock = ~clock;
  initial begin
    $display ("PC  IR                WD");
    $monitor ("%2d  %b %2d (%b)",PC,IR,WD,WD);
    clock = 1;
    #20 $finish;
  end
endmodule

/* Output
PC  IR                                WD
 0  10001100000010010000000000000000  5 (00000000000000000000000000000101)
 4  10001100000010100000000000000100  7 (00000000000000000000000000000111)
 8  00000001001010100101100000101010  1 (00000000000000000000000000000001)
12  00010001011000000000000000000010  1 (00000000000000000000000000000001)
16  10101100000010010000000000000100  4 (00000000000000000000000000000100)
20  10101100000010100000000000000000  0 (00000000000000000000000000000000)
24  10001100000010010000000000000000  7 (00000000000000000000000000000111)
28  10001100000010100000000000000100  5 (00000000000000000000000000000101)
32  00000001010010100101000000100111 -6 (11111111111111111111111111111010)
36  00100001010010100000000000000001 -5 (11111111111111111111111111111011)
40  00000001001010100101100000100000  2 (00000000000000000000000000000010)
*/
